/**
# Damien's sandbox
## Overview
<img style = float:right src="images/rbc_lvl9.png" alt="RBC" width="240px"/>

Welcome to my sandbox. Here, I provide documentation, test cases and references related to the implementation of liquid-enclosed capsules - such as biological vesicles - at low Reynolds number.

I implement both an Eulerian and a Lagrangian descriptions of the capsules.

## Lagrangian framework
In the Lagrangian description, also referred to as _front-tracking method_, we
follow the membrane using an unstructured mesh, which we use to compute the
internal strains and stresses of the membrane. These stresses are transferred to
the fluid with the Immersed Boundary Method (IBM), i.e. by means of a
regularized Dirac function as introduced by Peskin. The present Lagrangian
implementation is implemented in two and three dimensions. The internal fluid
of the capsule is allowed to have a different viscosity than the outer fluid,
but this feature is not available in 3D yet. A bending force in addition to the
elastic membrane stresses is also under development.

#### Source files
* [lag-mesh.h](src/lagrangian_caps/lag-mesh.h): definition of the mesh,
computation of geometrical quantities, advection of the mesh.
* [lag-mesh-mpi.h](src/lagrangian_caps/lag-mesh-mpi.h): helper functions
for compatibility with MPI
* [mesh-toolbox.h](src/lagrangian_caps/mesh-toolbox.h): helper functions for
Lagrangian meshes (mainly for creating 3D meshed surfaces)
* [reg-dirac.h](src/lagrangian_caps/reg-dirac.h): Implementation of the immersed
boundary method. In process of making use of the Cache structure for better
computational efficiency and compatibility with MPI.
* [elasticity-ft.h](src/lagrangian_caps/elasticity-ft.h): Implementation of the
membrane elasticity in the front-tracking framework. In 3D, this is an explicit
finite element method.
* [neo-hookean.h](src/lagrangian_caps/neo-hookean.h): Implementation of the
neo-Hookean elatic law.
* [skalak.h](src/lagrangian_caps/skalak.h): Implementation of the
Skalak elatic law, describing lipid-bilayer biological membranes. Not valid in
two dimensions.
* [caps-viscosity.h](src/lagrangian_caps/caps-viscosity.h): Allows non-unity
viscosity ratios between the fluids inner and outer the capsule. Based on the
method of Tryggvason.
* [bending-2d.h](src/lagrangian_caps/bending-2d.h): Implementation of a bending
force, in process of debugging.
* [view-ft.h](src/lagrangian_caps/view-ft.h): Allows visualization of the
Lagrangian mesh using bview.
* [common-shapes.h](src/lagrangian_caps/common-shapes.h): Some pre-defined
initial shapes for the capsules.
* [linear_elasticity.h](src/lagrangian_caps/linear-elasticity.h): Implementation
of a linear elastic law, useful only for comparison with some papers from
Pozrikidis.

#### Test cases
* [advect_caps.c](tests/lagrangian_caps/advect_caps.c): tests the simple advection
of a capsule devoid of elasticity.
* [curvature.c](tests/lagrangian_caps/curvature.c): tests the computations of
the normal vectors and curvature of a capsule.
* [impose-forcing.c](): Coming soon. Tests the force coupling from the capsule
to the fluid.
* [neo-hookean-stretch.c](): Coming soon. Tests the computations of the edges'
lengths and the neo-Hookean forces, including across periodic boundary
conditions.
* [advected-viscosity.c](): Coming soon. Tests the implementation of the
variable viscosity.
* [uniaxial_stretch.c](tests/lagrangian_caps/uniaxial_stretch.c): tests the
computation of 3D elastic tensions for a flat membrane, for both the
neo-Hookean and Skalak laws.
* [nh_shear_3d.c](tests/lagrangian_caps/nh_shear_3d.c): tests the general
3D implementation, including the neo-Hookean elastic law, and compares the
result to various authors.
* [constricted_channel.c](tests/lagrangian_caps/constricted_channel.c): tests
the Skalak elasticty law, the interaction with embedded boundaries and compares
quantitatively the deformation of the capsule to that of Park \&
Dimitrakopoulos.

#### Limitations and known bugs
* The bending force currently leads to numerical instabilities, probably due to
a wrong understanding of the force formulation on my part. More on this later.
* Multigrid: since the Cache structure is used in the IBM implementation, the
code on this sandbox is compatible with quad/octree grids but not Cartesian or
multigrid.


## Eulerian framework
In the Eulerian framework, we do not mesh the capsules. The present work aims at reproducing and improving the method of Ii et al ([\[1\]](#ii2012full), [\[2\]](#ii2018continuum)).

The employed Eulerian approach uses the VOF framework provided by Basilisk to track the position of the membrane. It has the main advantage of requiring only one common mesh for the background fluid and the capsules, thus greatly simplifying the implementation when adaptive mesh refinement (AMR) is considered. We can expect that for a large number of capsules, such an Eulerian description provides better computational performances than the Lagrangian alternative representation. Quantifying this improvement will be one of the sub-goals of this study.

Obviously, this Eulerian approach comes with downsides too:

* The membrane representation is not sharp, as the Eulerian quantity describing the membrane stretches (the surface left Cauchy-Green deformation tensor) need to be defined in a region of space of typical width 5 to 7 grid cells.
* When the Eulerian quantities are advected, diffusion will imply that the membrane "forgets" parts of its initial, unstressed configuration. As such, great care has to be taken to minimize diffusion in the advection step.


#### Source files
* [capsule.h](src/eulerian_caps/capsule.h): definition of the membrane region by smoothing the VOF function, application of the body-force from the membrane to the fluid.
* [elasticity.h](src/eulerian_caps/elasticity.h): definition, advection and projection of the (modified) surface left Cauchy-Green deformation tensor $\mathbf{G}$ and the surface Jacobian $J$.
* [neo_hookean.h](src/eulerian_caps/neo-hookean.h): computation of the elastic stress for a Neo-Hookean membrane using $\mathbf{G}$, $J$ and the projector onto the membrane surface $\mathbf{P}$.
* [normal_extension.h](src/eulerian_caps/normal_extension.h): extension of scalar quantities defined in interfacial cells to the extended membrane region along the normal direction, using a Hamilton-Jacobi equation. Also, extension of normal vectors themselves.
* [navier-stokes/my_centered.h](src/navier-stokes/my_centered.h): same as navier-stokes/centered.h, with addition of the *pp_vof* event (standing for "post-processing VOF") onto which capsule.h can hook.
* [grid/\*.h](src/grid): Modification of cartesian_commons.h in order to allow the definition of 3D tensors. All the other .h files in this folder need to point to the new cartesian_commons.h.


#### Test cases
* constant_elongation.h: (to be uploaded soon) tests the computation of the source terms of the advection equations for $J$ and $\mathbf{G}$, as well as the computation of the stress tensor.
* linear_elongation.h: (to be uploaded soon) tests the full advection equation for $J$ and $\mathbf{G}$, since the gradient terms are non zero. Also tests the computation of the acceleration.
* normal_scalar_extension.h: (to be uploaded soon) tests the extension of a scalar quantity from the interfactial cells to the rest of the extended membrane region along the normals.
* normal_vector_extension.h: (to be uploaded soon) tests the extension of normal vectors themselves from the interfacial cells to the rest of the membrane region.


#### Known bugs
* The normal vectors provided *on* the interface by the height functions are assumed to be provided at the center of the interfacial cells by the current implementation.
* Default boundary conditions of 3D tensors are not defined. This is fine as long as the developers/users are aware of it.

## References
~~~bib
@article{ii2012full,
  author  = {Ii, Satoshi and Gong, Xiaobo and Sugiyama, Kazuyasu and Wu, Jinbiao and Huang, Huaxiong and Takagi, Shu},
  journal = {Communications in Computational Physics},
  title   = {A full Eulerian fluid-membrane coupling method with a smoothed volume-of-fluid approach},
  year    = {2012},
  number  = {2},
  pages   = {544},
  volume  = {12},
  file    = {:ii2012full - A Full Eulerian Fluid Membrane Coupling Method with a Smoothed Volume of Fluid Approach.pdf:PDF},
  groups  = {Biological flows},
  doi     = {https://doi.org/10.4208/cicp.141210.110811s}
}
@article{ii2018continuum,
  author    = {Ii, Satoshi and Shimizu, Kazuya and Sugiyama, Kazuyasu and Takagi, Shu},
  journal   = {Journal of Computational Physics},
  title     = {Continuum and stochastic approach for cell adhesion process based on Eulerian fluid-capsule coupling with Lagrangian markers},
  year      = {2018},
  pages     = {769--786},
  volume    = {374},
  file      = {:ii2018continuum - Continuum and Stochastic Approach for Cell Adhesion Process Based on Eulerian Fluid Capsule Coupling with Lagrangian Markers.pdf:PDF},
  groups    = {Biological flows},
  publisher = {Elsevier},
  doi       = {https://doi.org/10.1016/j.jcp.2018.08.002}
}
~~~
*/
