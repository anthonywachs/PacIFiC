#-------------------------------------------------------------------------------
# Makefile generated by MAC depend utility
# USER DEFINED PART : START
#-------------------------------------------------------------------------------
MAC_HOME := /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC
LIBDIR        = $(MAC_HOME)/lib/Linux-64-OpenMPI-2.1.1-GNU-4.8.5-MAC-1.0.0-PETSC-3.2.0-HYPRE-2.10.1-MUMPS-4.10.0
BINDIR        = /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/lib/Linux-64-OpenMPI-2.1.1-GNU-4.8.5-MAC-1.0.0-PETSC-3.2.0-HYPRE-2.10.1-MUMPS-4.10.0/opt0/
OPT           = $(flagsopt0)
CPPFLAGS      = -DLEVEL=0

MAKE_MAC = 1
LINK_MAC = 1
WITH_PROFILE = 0
WITH_COVERAGE = 0
# runtime consistency : MAKE_MAC=1 => LINK_MAC=1
ifeq ($(MAKE_MAC),1)
  LINK_MAC = 1
endif

SRC = 
SRC += $(wildcard $(MAC_HOME)/ArrayVector/src/*.cc)
SRC += $(wildcard $(MAC_HOME)/FiniteVolume/src/*.cc)
SRC += $(wildcard $(MAC_HOME)/LinearAlgebra/src/*.cc)
SRC += $(wildcard $(MAC_HOME)/Base/src/*.cc)

PRECOMP_OBJ = 

INC = 
INC += /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/Base/include
INC += /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/ArrayVector/include
INC += /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/Base/include
INC += /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/FiniteVolume/include
INC += /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/LinearAlgebra/include

LIBPATH= 
LIBPATH += $(LIBDIR)

LDLIBS=
#-------------------------------------------------------------------------------
# USER DEFINED PART : END
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# EXTRA COMPONENT PART : START
#-------------------------------------------------------------------------------
# Inlining /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/etc/extra-Linux-64-OpenMPI-2.1.1-GNU-4.8.5-MAC-1.0.0-PETSC-3.2.0-HYPRE-2.10.1-MUMPS-4.10.0.mak
# Common Makefile for Linux plateform runnning gcc
# Settings for Extra Components

ifeq ($(LINK_MAC),1)

WITH_MPI      = 1

##### PETSc external API
# if PETSc is enabled, uncomment the appropriate definition of PETSc_VERSION
WITH_PETSc    = 1
PETSc_VERSION = 3.2.0

WITH_MUMPS    = 0
WITH_INTEL    = 1


endif

WITH_ZLIB = 1
WITH_EXTENDED_MATH = 1


###############################################################################
ifeq ($(WITH_MUMPS),1)

ifeq ($(MAKE_MAC),1)
SRC += $(wildcard $(MAC_HOME)/ExternalAPI/MUMPS/src/*.cc)
CPPFLAGS += -I$(MAC_HOME)/ExternalAPI/MUMPS/include
endif

#PARMETIS = -L$(PETSC_DIR)/../MUMPS/parmetis-4.0.2/lib -lparmetis -L$(PETSC_DIR)/../MUMPS/parmetis-4.0.2/build/Linux-x86_64/libmetis -lmetis
#PARMETIS =

# The order of the linking with the static libraries for MUMPS matter
# Apparently it should be kept to : MUMPS - SCALAPACK - GFORTRAN

CPPFLAGS += -I$(MUMPS_DIR)/include 
LIBPATH  += $(MUMPS_DIR)/lib
LDLIBS   += -ldmumps-Linux-$(MACWORLD_FULL_EXT) -lmumps_common-Linux-$(MACWORLD_FULL_EXT) -lpord-Linux-$(MACWORLD_FULL_EXT)

LIBPATH  += $(MACWORLD_SCALAPACK_LIBDIR)
LDLIBS   += $(LIBSCALAPACK_FOR_MAC___)

LIBPATH  += $(MACWORLD_GFORTRAN_LIBDIR)
LDLIBS   += -l$(MACWORLD_GFORTRAN_LIBS)

WITH_MPI = 1
WITH_BLAS = 1
endif


###############################################################################
ifeq ($(WITH_PETSc),1)

ifeq ($(MAKE_MAC),1)
SRC += $(wildcard $(MAC_HOME)/ExternalAPI/PETSc_$(PETSc_VERSION)/src/*.cc)
CPPFLAGS += -I$(MAC_HOME)/ExternalAPI/PETSc_$(PETSc_VERSION)/include
endif

CPPFLAGS += -I$(PETSC_DIR)/include -I$(PETSC_DIR)/$(PETSC_ARCH)/include
LIBPATH  += $(PETSC_DIR)/$(PETSC_ARCH)/lib
LDLIBS   += -lpetsc

# For Hypre
LIBPATH  += $(HYPRE_DIR)/$(HYPRE_ARCH)/lib
LDLIBS   += -lHYPRE

WITH_X11 = 1
WITH_BLAS = 1
endif


###############################################################################
ifeq ($(WITH_MPI),1)

# Mandatory definition MPIRUN
# this variable should contain the complete path to the mpirun command
# (without using any other variable)
MPIRUN = ${MACWORLD_MPI_BINDIR}/mpirun

ifeq ($(MAKE_MAC),1)
SRC += $(wildcard $(MAC_HOME)/ExternalAPI/MPI/src/*.cc)
CPPFLAGS += -I$(MAC_HOME)/ExternalAPI/MPI/include -DMPIRUN=\"$(MPIRUN)\"
endif

MPIPATH   = $(MACWORLD_MPI_ROOT)
CPPFLAGS += -I$(MACWORLD_MPI_INCDIR)
LIBPATH  += $(MACWORLD_MPI_LIBDIR)
LDLIBS   += $(LIBMPI_FOR_MAC___)

endif


###############################################################################
ifeq ($(WITH_X11),1)

X11PATH = /usr
CPPFLAGS += -I$(X11PATH)/include/X11
LIBPATH  += $(X11PATH)/lib$(MACWORLD_BITS_EXT)/
LDLIBS   += -lnsl -lXt -lX11 -lXmu
endif


###############################################################################
ifeq ($(WITH_SYSF77),1)
#LDLIBS   += -lg2c -lm
LDLIBS   += -lm
endif


###############################################################################
ifeq ($(WITH_EXTENDED_MATH),1)
CPPFLAGS += -DEXTENDED_MATH
endif


###############################################################################
ifeq ($(WITH_BLAS),1)
LIBPATH  += /usr/lib$(MACWORLD_BITS_EXT)
LDLIBS   += -lm
LIBPATH  += $(MACWORLD_BLAS_LIBDIR)
LDLIBS   += $(LIBLAS_FOR_MAC___)
LIBPATH  += $(MACWORLD_ATLAS_LIBDIR)
LDLIBS   += $(LIBATLAS_FOR_MAC___)
LIBPATH  += $(MACWORLD_LAPACK_LIBDIR)
LDLIBS   += $(LIBLAPACK_FOR_MAC___)
endif


###############################################################################
ifeq ($(WITH_ZLIB),1)
ZLIBPATH = /usr
LIBPATH  += $(ZLIBPATH)/lib$(MACWORLD_BITS_EXT)
CPPFLAGS += -I$(ZLIBPATH)/include -DZLIB
LDLIBS   += -lz
endif


###############################################################################
ifeq ($(WITH_INTEL),1)
LIBPATH  += $(MACWORLD_INTEL_LIBDIR)
LDLIBS   += $(LIBINTEL_FOR_MAC___)
endif
#-------------------------------------------------------------------------------
# EXTRA COMPONENT PART : END
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# ARCHITECTURE PART : START
#-------------------------------------------------------------------------------
# Inlining /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/etc/Linux-64-OpenMPI-2.1.1-GNU-4.8.5-MAC-1.0.0-PETSC-3.2.0-HYPRE-2.10.1-MUMPS-4.10.0.mak
# Common Makefile for Linux plateform runnning gcc
flagsdbg  = -g
flagsopt0 = ${MAC_OPT_FLAGS}
flagsopt1 = ${MAC_OPT_FLAGS}
flagsopt2 = ${MAC_OPT_FLAGS}

# setting the valid profile flags when needed
ifeq ($(WITH_PROFILE),1)
OPT += -pg
endif
# setting the valid test coverage flags when needed
ifeq ($(WITH_COVERAGE),1)
OPT += -fprofile-arcs -ftest-coverage
endif

CC       = ${MACWORLD_MPI_BINDIR}/${MACWORLD_MPI_C}
CXX      = ${MACWORLD_MPI_BINDIR}/${MACWORLD_MPI_CXX}
CPP      = ${MACWORLD_MPI_BINDIR}/${MACWORLD_MPI_C}
CXXFLAGS += $(OPT) -fPIC -Wall -Wno-long-long -Wno-ctor-dtor-privacy -pedantic -W -Wcast-qual -Wwrite-strings -Wconversion -Wshadow -Wno-unused-parameter
CXXFLAGS +=-DMPICH_IGNORE_CXX_SEEK=1

FC       = ${MACWORLD_MPI_BINDIR}/${MACWORLD_MPI_F77}
FFLAGS  += $(OPT) -fPIC

LDFLAGS += $(OPT) -fPIC
LDFLAGS += -lm

LD.so       = ${MACWORLD_MPI_BINDIR}/${MACWORLD_MPI_CXX} -shared -o $@ 
LDFLAGS.so  = $(OPT)
DYNAMIC_LIB_EXT = .so
LDLIBSSO = 

MKDEP.c  = ${MACWORLD_MPI_BINDIR}/${MACWORLD_MPI_C} -M $(CPPFLAGS)
MKDEP.cc = ${MACWORLD_MPI_BINDIR}/${MACWORLD_MPI_CXX} -M $(CPPFLAGS)

# Generating LDFLAGS from LIBPATH
# a_path => -La_path -Xlinker -rpath -Xlinker a_path
_lpath := $(foreach path,$(LIBPATH), -L$(path) -Xlinker -rpath -Xlinker $(path))
LDFLAGS += $(_lpath)
LDFLAGS.so += $(_lpath)

# Generating CPPFLAGS from INC
# a_path => -Ia_path
CPPFLAGS += $(foreach path,$(INC), -I$(path))
FFLAGS += $(foreach path,$(INC), -I$(path))

#-------------------------------------------------------------------------------
# ARCHITECTURE PART : END
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# GENERIC PART : START
#-------------------------------------------------------------------------------
# Inlining /home/wachs/Multiphase/PacIFiC-Git/pacific/Cartesian/MacWorld/MAC/etc/generic_targets.mak

#standard targets:
# all   : builds the target (TARGET variable) in BINDIR
# obj   : builds the objects only
# clean : clean the dependencies, the objects files and the target
# cleandepend : clean the dependencies
# cleanobj    : clean the objects files
# cleantarget : clean the target file

.PHONY : default_target all dirs
.PHONY : clean cleandepend cleanobj cleantarget
.SUFFIXES :
.SUFFIXES : .c .cc .d .f .F
default_target: all

###############################################################################
#default link mode (cc,c,f,...)
###############################################################################
LINK_MODE=cc

###############################################################################
#declare here the final target and the start sources (which may be in
#different dirs).
###############################################################################
TARGET = exe

MKDIR    = mkdir -p
RMDIR    = rm -fr
DEPFILTER = perl -e 'while(<>) {/^\s*\/usr\// && next;s{^($(*F)).o\s*:}{$(@D)/\1.o $(@D)/\1.d :}; print;}print "\n";'

###############################################################################
#object files definition
NOTDIRSRC := $(notdir $(SRC))
VPATH:=$(subst ' ',':',$(sort $(dir $(SRC))))
OBJ := $(patsubst %.c,   %.o, $(filter %.c,   $(NOTDIRSRC)))\
       $(patsubst %.cc,  %.o, $(filter %.cc,  $(NOTDIRSRC)))\
       $(patsubst %.cpp, %.o, $(filter %.cpp, $(NOTDIRSRC)))\
       $(patsubst %.F,  %.o, $(filter %.F,  $(NOTDIRSRC)))\
       $(patsubst %.f,  %.o, $(filter %.f,  $(NOTDIRSRC)))

OBJ_X = $(addprefix $(BINDIR), $(OBJ))

#target file definition
TARGET_X += $(addprefix $(BINDIR)/, $(TARGET))

#(sub)directories creation in BINDIR
ifdef OBJ_X
DIRS := $(shell $(MKDIR) $(sort $(dir $(OBJ_X))))
endif

#dependencies inclusion
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),cleandepend)
ifneq ($(MAKECMDGOALS),cleanobj)
ifneq ($(MAKECMDGOALS),cleantarget)
ifdef OBJ_X
include $(OBJ_X:.o=.d)
endif
endif
endif
endif
endif

#standard targets
all:$(TARGET_X)
obj: $(OBJ_X)
cleandepend: ; $(RM) $(OBJ_X:.o=.d)
cleanobj:    ; $(RM) $(OBJ_X)
cleantarget: ; $(RM) $(TARGET_X)
clean       : cleandepend cleanobj cleantarget

#the target cmd depends on the suffix (.a, .so or other (executable))
$(TARGET_X):$(OBJ_X)
ifeq ($(suffix $(TARGET_X)),.a)
	$(AR) $(ARFLAGS) $@ $?
else
	$(RM) $(TARGET_X)
ifeq ($(suffix $(TARGET_X)),$(DYNAMIC_LIB_EXT))
	 cd $(BINDIR) ; $(LD.so) $(LDFLAGS.so) $(OBJ) $(PRECOMP_OBJ) $(LDLIBSSO) $(LDLIBS)
else 
	$(LINK.$(LINK_MODE)) -o $@ $(LDFLAGS) $(OBJ_X) $(PRECOMP_OBJ) $(LDLIBS)
endif
endif
###############################################################################
# Production rules ... Don't look further !
###############################################################################

$(BINDIR)%.d:%.F   ; touch $@
$(BINDIR)%.d:%.f   ; touch $@
$(BINDIR)%.d:%.c 
	@echo "Building dependencies for $<"
	@$(MKDEP.c) $< | $(DEPFILTER) > $@
$(BINDIR)%.d:%.cc 
	@echo "Building dependencies for $<"
	@$(MKDEP.c) $< | $(DEPFILTER) > $@
$(BINDIR)%.d:%.cpp 
	@echo "Building dependencies for $<"
	@$(MKDEP.c) $< | $(DEPFILTER) > $@

$(BINDIR)%.o:%.f  ;	$(COMPILE.f)   $< -o $@
$(BINDIR)%.o:%.F  ;	$(COMPILE.f)   $< -o $@
$(BINDIR)%.o:%.c  ;	$(COMPILE.c)   $< -o $@
$(BINDIR)%.o:%.cc ;	$(COMPILE.cc)  $< -o $@
$(BINDIR)%.o:%.cpp ;	$(COMPILE.cc)  $< -o $@
#-------------------------------------------------------------------------------
# GENERIC PART : END
#-------------------------------------------------------------------------------
