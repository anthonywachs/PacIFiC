//----------------------------------------------------------------------
inline
MAC_Assertion:: MAC_Assertion( void )
//----------------------------------------------------------------------
{
}

//----------------------------------------------------------------------
inline
MAC_Assertion:: ~MAC_Assertion( void )
//----------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------
inline
MAC_Assertion&
MAC_Assertion:: object( void )
//-----------------------------------------------------------------------
{
    negation = false ;
    eval = true ;
    return unique_instance ;
}

//-----------------------------------------------------------------------
inline
bool
MAC_Assertion:: is_handling_check( CheckType a_check )
//-----------------------------------------------------------------------
{
   return( (checking_level & a_check) != 0 ) ;
}

//-----------------------------------------------------------------------
inline
bool
MAC_Assertion:: is_checking( void )
//-----------------------------------------------------------------------
{
   return( current_check != None ) ;
}

//-----------------------------------------------------------------------
inline
bool
MAC_Assertion:: do_eval( bool& shortCut )
//-----------------------------------------------------------------------
{
    bool ee = eval ;
    shortCut = ! eval && MAC_Assertion::result ;
    eval = false ;
    return ee ;
}

//-----------------------------------------------------------------------
inline
bool&
MAC_Assertion:: push_bool( void )
//-----------------------------------------------------------------------
{
   return bool_table[ ++nb_bool ] ;
}

//-----------------------------------------------------------------------
inline
bool
MAC_Assertion:: pop_bool( void )
//-----------------------------------------------------------------------
{
   return bool_table[ nb_bool-- ] ;
}

//-----------------------------------------------------------------------
inline
const MAC_Assertion&
operator!( MAC_Assertion const& a )
//-----------------------------------------------------------------------
{
    MAC_Assertion::negation = !MAC_Assertion::negation ;
    return a ;
}

//-----------------------------------------------------------------------
inline
bool
operator&&( bool left, MAC_Assertion const& a )
//-----------------------------------------------------------------------
{
    MAC_Assertion::eval = left ;
    return left ;
}

//-----------------------------------------------------------------------
inline
bool
operator||( bool left, MAC_Assertion const& a )
//-----------------------------------------------------------------------
{
    MAC_Assertion::eval = !left ;
    return left ;
}

//-----------------------------------------------------------------------
inline
MAC_Assertion:: operator bool( void ) const
//-----------------------------------------------------------------------
{
    MAC_Assertion::eval = true ;
    return false ;
}

//---------------------------------------------------------------------
inline
MAC_Marker:: MAC_Marker( const char* name )
//---------------------------------------------------------------------
{
   ring[ ring_pos++ ] = name ;
   ring_pos = ring_pos % 256 ;
}

//---------------------------------------------------------------------
inline
MAC_Marker:: ~MAC_Marker( void )
//---------------------------------------------------------------------
{
   ring_pos = ( ring_pos-1 ) % 256 ;
}

//----------------------------------------------------------------------
inline
size_t
MAC_Marker:: nb_labels( void )
//----------------------------------------------------------------------
{
   return ring_pos ;
}

//----------------------------------------------------------------------
inline
char const*
MAC_Marker:: label( size_t i )
//----------------------------------------------------------------------
{
   return( ring[ i ] ) ;
}
