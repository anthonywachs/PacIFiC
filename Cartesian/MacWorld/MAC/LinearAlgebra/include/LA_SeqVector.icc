//----------------------------------------------------------------------
inline
double
LA_SeqVector:: item( size_t i ) const 
//----------------------------------------------------------------------
{
   MAC_LABEL( "LA_SeqVector:: item" ) ;
   MAC_CHECK_PRE( item_PRE( i ) ) ;
   
   return( DATA[i] ) ;
}

//----------------------------------------------------------------------
inline
void
LA_SeqVector:: set_item( size_t i, double x ) 
//----------------------------------------------------------------------
{
   MAC_LABEL( "LA_SeqVector:: set_item" ) ;
   MAC_CHECK_PRE( set_item_PRE( i ) ) ;
   MAC_SAVEOLD( LA::SyncState, state, state() ) ;
   
   if( is_desynchronizable() && !only_local_modifs() )
   {
      set_unsynchronized_state( LA::NotSync_set ) ;
   }
   DATA[i] = x ;

   MAC_CHECK_POST( FORMAL( item(i) == x ) ) ;
   MAC_CHECK_POST( set_item_POST( i, OLD( state ) ) ) ;
}

//----------------------------------------------------------------------
inline
void
LA_SeqVector:: add_to_item( size_t i, double x ) 
//----------------------------------------------------------------------
{
   MAC_LABEL( "LA_SeqVector:: add_to_item" ) ;
   MAC_CHECK_PRE( add_to_item_PRE( i ) ) ;
   MAC_SAVEOLD( LA::SyncState, state, state() ) ;
   
   if( is_desynchronizable() && !only_local_modifs() )
   {
      set_unsynchronized_state( LA::NotSync_add ) ;
   }
   DATA[i] += x ;

   MAC_CHECK_POST( FORMAL( item(i) == OLD(item)+x ) ) ;
   MAC_CHECK_POST( add_to_item_POST( i, OLD( state ) ) ) ;
}

//----------------------------------------------------------------------
inline
double const*
LA_SeqVector:: data( void ) const
//----------------------------------------------------------------------
{
   MAC_LABEL( "LA_SeqVector:: data const" ) ;
   
   double const* result = DATA ;

   MAC_CHECK_POST( EQUIVALENT( nb_rows()>0, result != 0 ) ) ;
   return( result ) ;
}

//----------------------------------------------------------------------
inline
double*
LA_SeqVector:: data( void )
//----------------------------------------------------------------------
{
   MAC_LABEL( "LA_SeqVector:: data" ) ;
   
   double* result = DATA ;

   MAC_CHECK_POST( EQUIVALENT( nb_rows()>0, result != 0 ) ) ;
   return( result ) ;
}

//----------------------------------------------------------------------
inline
void
LA_SeqVector:: set( size_t a_nb_rows, double* values )
//----------------------------------------------------------------------
{
   MAC_LABEL( "LA_SeqVector:: set" ) ;
   MAC_CHECK_PRE( EQUIVALENT( a_nb_rows > 0, values != 0 ) ) ;

   if( OWNS_DATA && DATA != 0 ) delete [] DATA ;
   
   set_rows_number( a_nb_rows ) ;
   make_non_resizable() ;
   OWNS_DATA = false ;
   DATA = values ;

   MAC_CHECK_POST( nb_rows() == a_nb_rows ) ;
   MAC_CHECK_POST( data() == values ) ;
   MAC_CHECK_POST( !is_resizable() ) ;
}
